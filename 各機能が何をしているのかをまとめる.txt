1. ProductController.php
機能：
ProductController.phpは、商品に関する操作（表示、登録、編集、削除）を行うためのコントローラーです。ユーザーからのリクエストを受け取り、それに基づいてProductモデルやCompanyモデルを操作する。

主な機能：
一覧表示（ichiranメソッド）: 商品リストを表示する。リストはページネーションで表示され、商品名、会社名、価格、在庫などのフィルタリングが可能です。

新規登録画面表示（showStoreFormメソッド）: 商品登録フォームを表示する。ユーザーはここで商品名、会社、価格、在庫などの情報を入力できる。

新規登録処理（registSubmitメソッド）: ユーザーが登録フォームで送信したデータを受け取り、Productモデルを使って新しい商品をデータベースに登録する。

商品詳細画面表示（showDetailメソッド）: 商品の詳細ページを表示する。特定の商品をIDで検索し、その商品に関連する会社名を表示する。

商品編集画面表示（showEditメソッド）: 商品の情報を編集するためのフォームを表示する。商品名、価格、在庫などを変更することができる。

商品編集処理（registEditメソッド）: 編集された商品情報をデータベースに保存する。画像が新たにアップロードされた場合は、それをストレージに保存し、データベースにパスを保存する。

削除処理（destroyメソッド）: 特定の商品をデータベースから削除する。

2. Product.php (Productモデル)
機能：
Product.phpはProductモデルであり、商品データを管理する。LaravelのEloquent ORMを使用して、商品データをデータベースと簡単にやりとりできるようにする。

主な機能：
fillableプロパティ: マスアサインメントを利用するために、どのフィールドを一度に更新できるかを指定する。これにより、商品名、会社ID、価格、在庫などのフィールドに対して安全にデータを挿入または更新できる。

companyメソッド: ProductモデルとCompanyモデルとの間のリレーションシップを定義しています。Productは1つのCompanyに属するので、belongsToリレーションを使用しています。このメソッドにより、Productからその関連するCompanyの情報を簡単に取得できる。

3. Company.php (Companyモデル)
機能：
Company.phpはCompanyモデルであり、企業情報を管理する。このモデルもEloquent ORMを利用して、企業データとその関連商品データを操作するために使用されます。

主な機能：
fillableプロパティ: どのカラムに対してマスアサインメントを行えるかを指定しています。この場合、company_name（会社名）が主なフィールドとなります。

productsメソッド: CompanyとProductの間に1対多のリレーションシップを定義しています。つまり、1つのCompanyは複数のProductを持つことができる。このメソッドを使うことで、Companyからその会社が提供しているすべての製品を取得できる。

各ファイルの役割まとめ
ProductController.php:

商品に関する操作（表示、登録、編集、削除）を制御。
ProductとCompanyのモデルを操作して、ユーザーのリクエストに応じた処理を行う。
ビューに必要なデータを渡す。
Product.php (Productモデル):

商品データを管理し、データベースとやりとり。
ProductとCompanyのリレーションを定義して、商品の会社情報を取得できるようにする。
Company.php (Companyモデル):

企業データを管理。
CompanyとProductのリレーションを定義して、企業に関連する製品を取得できるようにする。
全体的な流れ
ユーザーが商品リストの表示、登録、編集、削除などを行うと、ProductControllerの各メソッドが呼び出されます。
ProductControllerは、データベースから商品情報や会社情報を取得する際に、ProductとCompanyのモデルを使ってデータ操作を行います。
Productモデルでは、商品の詳細情報や関連会社情報を管理し、Companyモデルでは会社情報を管理する。
Eloquentのリレーションシップを活用し、例えば商品の情報とその関連する会社名を簡単に取得できるようにする。
この構成により、商品情報と会社情報が効率的に管理され、柔軟に操作できるシステムが実現されています。